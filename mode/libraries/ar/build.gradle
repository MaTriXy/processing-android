import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

plugins {
    id 'aar'    
}

dependencies {
    compileOnly name: "android"
    compileOnly "org.p5android:processing-core:${modeVersion}"
    implementationAar "com.google.ar:core:${garVersion}"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["src/"]
        }        
    }
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourceJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "library/ar.jar"
}

compileJava.doFirst {
    String[] deps = ["core.jar"]
    File libFolder = file("library")
    libFolder.mkdirs()
    for (String fn : deps) {
        Files.copy(file("${rootDir}/build/libs/" + fn).toPath(),
                   file("library/" + fn).toPath(), REPLACE_EXISTING);
    }
}

build.doLast {
    // Copying ar jar to library folder
    File arJar = file("library/ar.jar")
    arJar.mkdirs();
    
    // Need to check the existance of the files before using as the files 
    // will get generated only if Task ':mode:libraries:ar:jar' is not being skipped
    // Task ':mode:libraries:ar:jar' will be skipped if source files are unchanged or jar task is UP-TO-DATE
    
    if (file("$buildDir/libs/ar.jar").exists()) {
        Files.copy(file("$buildDir/libs/ar.jar").toPath(),
                   arJar.toPath(), REPLACE_EXISTING);
    }
    // Renaming artifacts for maven publishing
    if (file("$buildDir/libs/ar.jar").exists()) {
        Files.move(file("$buildDir/libs/ar.jar").toPath(),
                   file("$buildDir/libs/processing-ar-${arLibVersion}.jar").toPath(), REPLACE_EXISTING);
    }
    if (file("$buildDir/libs/ar-sources.jar").exists()) {
        Files.move(file("$buildDir/libs/ar-sources.jar").toPath(),
                   file("$buildDir/libs/processing-ar-${arLibVersion}-sources.jar").toPath(), REPLACE_EXISTING);
    }
    if (file("$buildDir/libs/ar.jar.MD5").exists()) {
        Files.move(file("$buildDir/libs/ar.jar.MD5").toPath(),
                   file("$buildDir/libs/processing-ar-${arLibVersion}.jar.md5").toPath(), REPLACE_EXISTING);
    }
}

ext {
    libName = 'processing-ar'
    libVersion = arLibVersion
    libJar = "${buildDir}/libs/${libName}-${libVersion}.jar"
    libSrc = "${buildDir}/libs/${libName}-${libVersion}-sources.jar"
    libMd5 = "${buildDir}/libs/${libName}-${libVersion}-sources.jar.md5"
    libDependencies = [[group: 'org.p5android', name: 'processing-core', version: modeVersion],
                       [group: 'com.google.ar', name: 'core', version: garVersion]]
}
apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"
